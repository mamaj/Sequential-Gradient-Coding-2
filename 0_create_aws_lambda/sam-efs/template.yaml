Transform: AWS::Serverless-2016-10-31

Parameters:
  LatestAmiId:
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'

  VpcId:
    Type: 'AWS::EC2::VPC::Id'

  SubnetId:
    Type: 'AWS::EC2::Subnet::Id'

  RunsDir:
    Type: String

  DatasetDir:
    Type: String

  ModelPath:
    Type: String

  PythonVersion:
    Type: String
    Default: python3.8

  DatasetName:
    Type: String

  PublicKey:
    Type: String

  GradCommunication:
    Type: String

  Prefix:
    Type: String

Resources:
  EfsSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupName: !Sub ${Prefix}-allow-efs-traffic
      GroupDescription: "A security group for Amazon EFS that allows inbound NFS access from resources (including the mount target) associated with this security group (TCP 2049)."
      VpcId:
        Ref: VpcId
      SecurityGroupIngress:
        - FromPort: 2049
          ToPort: 2049
          IpProtocol: "tcp"
          Description: "Allow NFS traffic - TCP 2049"
          CidrIp: "0.0.0.0/0"

  SshSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupName: !Sub ${Prefix}-allow-ssh-traffic
      GroupDescription: "A security group that allows inbound SSH traffic (TCP port 22)."
      VpcId:
        Ref: VpcId
      SecurityGroupEgress:
        - FromPort: -1
          ToPort: -1
          IpProtocol: "-1"
          CidrIp: "0.0.0.0/0"
      SecurityGroupIngress:
        - FromPort: 22
          ToPort: 22
          IpProtocol: "tcp"
          Description: "Allow SSH traffic"
          CidrIp: "0.0.0.0/0"

  FileSystem:
    Type: 'AWS::EFS::FileSystem'
    Properties:
      PerformanceMode: maxIO
      # PerformanceMode: generalPurpose

  AccessPoint:
    Type: 'AWS::EFS::AccessPoint'
    Properties:
      FileSystemId:
        Ref: FileSystem
      PosixUser:
        Uid: "1000"
        Gid: "1000"
      RootDirectory:
        Path: "/lambda"
        CreationInfo:
          OwnerGid: "1000"
          OwnerUid: "1000"
          Permissions: "777"

  MountTarget1:
    Type: 'AWS::EFS::MountTarget'
    Properties:
      FileSystemId:
        Ref: FileSystem
      SubnetId:
        Ref: SubnetId
      SecurityGroups:
        - Ref: EfsSecurityGroup

  LambdaFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      CodeUri: ./code
      Handler: app.lambda_handler
      Runtime:
        Ref: PythonVersion
      Architectures:
        - x86_64
      VpcConfig:
        SecurityGroupIds:
          - Ref: EfsSecurityGroup
        SubnetIds:
          - Ref: SubnetId
      FileSystemConfigs:
        - Arn: !GetAtt AccessPoint.Arn
          LocalMountPath: /mnt/lambda
      Timeout: 200
      MemorySize: 2500
      Environment:
        Variables:
          MODEL_PATH:
            Ref: ModelPath
          DATASET_DIR:
            Ref: DatasetDir
          RUNS_DIR:
            Ref: RunsDir
          DATASET_NAME:
            Ref: DatasetName
          GRAD_COMMUNICATION:
           Ref: GradCommunication

      Policies:
        - EFSWriteAccessPolicy:
            FileSystem: 
              Ref: FileSystem
            AccessPoint: 
              Ref: AccessPoint
    DependsOn: "MountTarget1"

  KeyPairEc2:
    Type: 'AWS::EC2::KeyPair'
    Properties:
      KeyName: !Sub ${Prefix}-Ec2ForEfsKey
      PublicKeyMaterial:
        Ref: PublicKey

  Ec2Instance:
    Type: 'AWS::EC2::Instance'
    Properties:
      InstanceType: t2.small
      SecurityGroupIds:
        - Ref: EfsSecurityGroup
        - Ref: SshSecurityGroup
      SubnetId:
        Ref: SubnetId
      KeyName: 
        Ref: KeyPairEc2
      ImageId: 
        Ref: LatestAmiId
      UserData:
        Fn::Base64: 
          !Sub |
            #!/bin/bash
    DependsOn: "KeyPairEc2"

Outputs:
  FunctionArn:
    Value: !GetAtt LambdaFunction.Arn

  Ec2PublicDns:
    Value: !GetAtt Ec2Instance.PublicDnsName

  EfsPublicDns:
    Value: !GetAtt FileSystem.FileSystemId
